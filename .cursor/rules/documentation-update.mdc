---
description: This rule provides guidelines for periodically reviewing and updating documentation files in the documentation directory. It ensures that documentation remains accurate, up-to-date, and aligned with the current state of the project
globs: 
alwaysApply: false
---
# Documentation Review Rule

## Description
This rule provides guidelines for periodically reviewing and updating documentation files in the documentation directory. It ensures that documentation remains accurate, up-to-date, and aligned with the current state of the project.

## Glob Pattern
/documentation/**/*.md

## Review Schedule
- **README.md files**: Review monthly or after major feature additions
- **Product Requirements**: Review quarterly or when related features change
- **Technical Documentation**: Review when related components are modified
- **User Guides**: Review after UI changes or feature additions
- **API Documentation**: Review after API changes or additions
- **Process Documentation**: Review semi-annually
- **Reference Materials**: Review annually

## Review Checklist

### General Documentation Review
- [ ] Verify that all information is current and accurate
- [ ] Check for outdated references to features, components, or processes
- [ ] Ensure links to other documents are working and point to the correct resources
- [ ] Update timestamps and version information
- [ ] Add new sections for recently added features or components
- [ ] Remove or archive information about deprecated features
- [ ] Check for consistency in terminology and formatting
- [ ] Verify that examples and code snippets are still valid
- [ ] Update screenshots or diagrams if the UI or architecture has changed

### Directory-Specific Reviews

#### data-architecture/
- [ ] Verify that data models match the current database schema
- [ ] Update entity relationship diagrams to reflect any schema changes
- [ ] Document any new tables, fields, or relationships
- [ ] Review data migration processes and update as needed

#### product-requirements/
- [ ] Update feature specifications to match current implementation
- [ ] Revise acceptance criteria based on user feedback and testing
- [ ] Add new user stories for planned features
- [ ] Update priority and status information for requirements

#### design-docs/
- [ ] Ensure architectural diagrams reflect the current system design
- [ ] Document any new design decisions or changes to existing approaches
- [ ] Update component specifications to match current implementation
- [ ] Review and update technical debt documentation

#### user-guides/
- [ ] Update screenshots to match the current UI
- [ ] Revise procedures to match current workflows
- [ ] Add guides for new features
- [ ] Remove or update guides for changed features
- [ ] Verify that all described user interactions are still valid

#### api-docs/
- [ ] Update endpoint specifications to match current API
- [ ] Verify that request/response examples are accurate
- [ ] Document any new authentication or authorization requirements
- [ ] Update integration examples to use current best practices

#### process/
- [ ] Update development workflows to match current practices
- [ ] Revise coding standards based on team feedback and industry trends
- [ ] Update testing procedures to reflect current testing approach
- [ ] Revise deployment guidelines to match current CI/CD pipeline

#### reference-materials/
- [ ] Update templates to match current industry standards
- [ ] Add new research findings or competitive analyses
- [ ] Archive outdated reference materials

## Documentation Update Guidelines
1. Use clear, descriptive language
2. Follow consistent markdown formatting
3. Include metadata (author, date, version) where appropriate
4. Link related documents for better navigation
5. Use date prefixes for versioned documents (e.g., `2025-02-feature-name.md`)
6. Update the main README.md when adding new categories or important documents
7. Commit documentation updates with descriptive commit messages

## Automation Suggestions
- Set up automated reminders for documentation review based on the schedule
- Use git hooks to enforce documentation updates when related code changes
- Implement automated checks for broken links and outdated references
- Create templates for new documentation to ensure consistency

## Last Updated
This rule was last reviewed and updated on [Current Date].